// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: cc_service.proto

package logs_service

import (
	context "context"
	log "github.com/STBoyden/codectrl-go-protobufs/data/log"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServerClient is the client API for LogServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServerClient interface {
	// Gets the latest log from the server, generally not used but is here for
	// compatibiliy's sake in the case where a front-end cannot use a stream.
	GetLog(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*log.Log, error)
	// Gets a stream of the available logs, this should be preferred over
	// `GetLog` when possible.
	GetLogs(ctx context.Context, in *Connection, opts ...grpc.CallOption) (LogServer_GetLogsClient, error)
	// Gets the current details about the server.
	GetServerDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerDetails, error)
	// Registers a new front-end connection to a server instance and returns the
	// `Connection` message with a `uuid`.
	RegisterClient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Connection, error)
	// Registers an already pre-existing connection to a server instance using an
	// already generated `uuid` supplied in the `Connection`. Servers should
	// verify that the supplied `uuid` is, in fact, a valid hyphenated v4 UUID.
	// Returns a boolean whether or not the registration was succesful.
	RegisterExistingClient(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*RequestResult, error)
}

type logServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServerClient(cc grpc.ClientConnInterface) LogServerClient {
	return &logServerClient{cc}
}

func (c *logServerClient) GetLog(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*log.Log, error) {
	out := new(log.Log)
	err := c.cc.Invoke(ctx, "/codectrl.logs_service.LogServer/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) GetLogs(ctx context.Context, in *Connection, opts ...grpc.CallOption) (LogServer_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogServer_ServiceDesc.Streams[0], "/codectrl.logs_service.LogServer/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServerGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogServer_GetLogsClient interface {
	Recv() (*log.Log, error)
	grpc.ClientStream
}

type logServerGetLogsClient struct {
	grpc.ClientStream
}

func (x *logServerGetLogsClient) Recv() (*log.Log, error) {
	m := new(log.Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServerClient) GetServerDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerDetails, error) {
	out := new(ServerDetails)
	err := c.cc.Invoke(ctx, "/codectrl.logs_service.LogServer/GetServerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) RegisterClient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/codectrl.logs_service.LogServer/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) RegisterExistingClient(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*RequestResult, error) {
	out := new(RequestResult)
	err := c.cc.Invoke(ctx, "/codectrl.logs_service.LogServer/RegisterExistingClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServerServer is the server API for LogServer service.
// All implementations must embed UnimplementedLogServerServer
// for forward compatibility
type LogServerServer interface {
	// Gets the latest log from the server, generally not used but is here for
	// compatibiliy's sake in the case where a front-end cannot use a stream.
	GetLog(context.Context, *Connection) (*log.Log, error)
	// Gets a stream of the available logs, this should be preferred over
	// `GetLog` when possible.
	GetLogs(*Connection, LogServer_GetLogsServer) error
	// Gets the current details about the server.
	GetServerDetails(context.Context, *emptypb.Empty) (*ServerDetails, error)
	// Registers a new front-end connection to a server instance and returns the
	// `Connection` message with a `uuid`.
	RegisterClient(context.Context, *emptypb.Empty) (*Connection, error)
	// Registers an already pre-existing connection to a server instance using an
	// already generated `uuid` supplied in the `Connection`. Servers should
	// verify that the supplied `uuid` is, in fact, a valid hyphenated v4 UUID.
	// Returns a boolean whether or not the registration was succesful.
	RegisterExistingClient(context.Context, *Connection) (*RequestResult, error)
	mustEmbedUnimplementedLogServerServer()
}

// UnimplementedLogServerServer must be embedded to have forward compatible implementations.
type UnimplementedLogServerServer struct {
}

func (UnimplementedLogServerServer) GetLog(context.Context, *Connection) (*log.Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedLogServerServer) GetLogs(*Connection, LogServer_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLogServerServer) GetServerDetails(context.Context, *emptypb.Empty) (*ServerDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerDetails not implemented")
}
func (UnimplementedLogServerServer) RegisterClient(context.Context, *emptypb.Empty) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedLogServerServer) RegisterExistingClient(context.Context, *Connection) (*RequestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExistingClient not implemented")
}
func (UnimplementedLogServerServer) mustEmbedUnimplementedLogServerServer() {}

// UnsafeLogServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServerServer will
// result in compilation errors.
type UnsafeLogServerServer interface {
	mustEmbedUnimplementedLogServerServer()
}

func RegisterLogServerServer(s grpc.ServiceRegistrar, srv LogServerServer) {
	s.RegisterService(&LogServer_ServiceDesc, srv)
}

func _LogServer_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codectrl.logs_service.LogServer/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).GetLog(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServerServer).GetLogs(m, &logServerGetLogsServer{stream})
}

type LogServer_GetLogsServer interface {
	Send(*log.Log) error
	grpc.ServerStream
}

type logServerGetLogsServer struct {
	grpc.ServerStream
}

func (x *logServerGetLogsServer) Send(m *log.Log) error {
	return x.ServerStream.SendMsg(m)
}

func _LogServer_GetServerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).GetServerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codectrl.logs_service.LogServer/GetServerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).GetServerDetails(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codectrl.logs_service.LogServer/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).RegisterClient(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_RegisterExistingClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).RegisterExistingClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codectrl.logs_service.LogServer/RegisterExistingClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).RegisterExistingClient(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

// LogServer_ServiceDesc is the grpc.ServiceDesc for LogServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codectrl.logs_service.LogServer",
	HandlerType: (*LogServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLog",
			Handler:    _LogServer_GetLog_Handler,
		},
		{
			MethodName: "GetServerDetails",
			Handler:    _LogServer_GetServerDetails_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _LogServer_RegisterClient_Handler,
		},
		{
			MethodName: "RegisterExistingClient",
			Handler:    _LogServer_RegisterExistingClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _LogServer_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cc_service.proto",
}

// LogClientClient is the client API for LogClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClientClient interface {
	// Sends a single log. Should only be used in cases where log batching is not
	// possible or not determinable.
	SendLog(ctx context.Context, in *log.Log, opts ...grpc.CallOption) (*RequestResult, error)
	// Sends a stream of logs. Should generally be preferred over `SendLog` as it
	// allows for batch sending of `Log`s and _should_ be more efficient on
	// resources.
	SendLogs(ctx context.Context, opts ...grpc.CallOption) (LogClient_SendLogsClient, error)
}

type logClientClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClientClient(cc grpc.ClientConnInterface) LogClientClient {
	return &logClientClient{cc}
}

func (c *logClientClient) SendLog(ctx context.Context, in *log.Log, opts ...grpc.CallOption) (*RequestResult, error) {
	out := new(RequestResult)
	err := c.cc.Invoke(ctx, "/codectrl.logs_service.LogClient/SendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClientClient) SendLogs(ctx context.Context, opts ...grpc.CallOption) (LogClient_SendLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogClient_ServiceDesc.Streams[0], "/codectrl.logs_service.LogClient/SendLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logClientSendLogsClient{stream}
	return x, nil
}

type LogClient_SendLogsClient interface {
	Send(*log.Log) error
	CloseAndRecv() (*RequestResult, error)
	grpc.ClientStream
}

type logClientSendLogsClient struct {
	grpc.ClientStream
}

func (x *logClientSendLogsClient) Send(m *log.Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logClientSendLogsClient) CloseAndRecv() (*RequestResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RequestResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogClientServer is the server API for LogClient service.
// All implementations must embed UnimplementedLogClientServer
// for forward compatibility
type LogClientServer interface {
	// Sends a single log. Should only be used in cases where log batching is not
	// possible or not determinable.
	SendLog(context.Context, *log.Log) (*RequestResult, error)
	// Sends a stream of logs. Should generally be preferred over `SendLog` as it
	// allows for batch sending of `Log`s and _should_ be more efficient on
	// resources.
	SendLogs(LogClient_SendLogsServer) error
	mustEmbedUnimplementedLogClientServer()
}

// UnimplementedLogClientServer must be embedded to have forward compatible implementations.
type UnimplementedLogClientServer struct {
}

func (UnimplementedLogClientServer) SendLog(context.Context, *log.Log) (*RequestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLog not implemented")
}
func (UnimplementedLogClientServer) SendLogs(LogClient_SendLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLogs not implemented")
}
func (UnimplementedLogClientServer) mustEmbedUnimplementedLogClientServer() {}

// UnsafeLogClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogClientServer will
// result in compilation errors.
type UnsafeLogClientServer interface {
	mustEmbedUnimplementedLogClientServer()
}

func RegisterLogClientServer(s grpc.ServiceRegistrar, srv LogClientServer) {
	s.RegisterService(&LogClient_ServiceDesc, srv)
}

func _LogClient_SendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(log.Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogClientServer).SendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codectrl.logs_service.LogClient/SendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogClientServer).SendLog(ctx, req.(*log.Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogClient_SendLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogClientServer).SendLogs(&logClientSendLogsServer{stream})
}

type LogClient_SendLogsServer interface {
	SendAndClose(*RequestResult) error
	Recv() (*log.Log, error)
	grpc.ServerStream
}

type logClientSendLogsServer struct {
	grpc.ServerStream
}

func (x *logClientSendLogsServer) SendAndClose(m *RequestResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logClientSendLogsServer) Recv() (*log.Log, error) {
	m := new(log.Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogClient_ServiceDesc is the grpc.ServiceDesc for LogClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codectrl.logs_service.LogClient",
	HandlerType: (*LogClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLog",
			Handler:    _LogClient_SendLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLogs",
			Handler:       _LogClient_SendLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cc_service.proto",
}
